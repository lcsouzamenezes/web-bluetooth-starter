{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","supportsBluetooth","setSupportsBluetooth","isDisconnected","setIsDisconnected","batteryLevel","setBatteryLevel","useEffect","navigator","bluetooth","onDisconnected","event","alert","target","handleCharacteristicValueChanged","value","getUint8","connectToDeviceAndSubscribeToUpdates","a","requestDevice","filters","services","device","addEventListener","gatt","connect","server","getPrimaryService","service","getCharacteristic","characteristic","startNotifications","readValue","reading","console","log","className","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sQA0FeA,MAvFf,WAAgB,IAAD,EACqCC,oBAAS,GAD9C,mBACNC,EADM,KACaC,EADb,OAE+BF,oBAAS,GAFxC,mBAENG,EAFM,KAEUC,EAFV,OAG2BJ,mBAAS,MAHpC,mBAGNK,EAHM,KAGQC,EAHR,KAMbC,qBAAU,WACJC,UAAUC,WACZP,GAAqB,KAEtB,IAKH,IAAMQ,EAAiB,SAACC,GACtBC,MAAM,cAAD,OAAeD,EAAME,OAArB,qBACLT,GAAkB,IAOdU,EAAmC,SAACH,GACxCL,EAAgBK,EAAME,OAAOE,MAAMC,SAAS,GAAK,MAO7CC,EAAoC,uCAAG,oCAAAC,EAAA,+EAGpBV,UAAUC,UAC5BU,cAAc,CACbC,QAAS,CAAC,CAACC,SAAU,CAAC,uBALe,cAGnCC,EAHmC,OAQzClB,GAAkB,GAGlBkB,EAAOC,iBAAiB,yBAA0Bb,GAXT,SAcpBY,EAAOE,KAAKC,UAdQ,cAcnCC,EAdmC,iBAiBnBA,EAAOC,kBAAkB,mBAjBN,eAiBnCC,EAjBmC,iBAoBZA,EAAQC,kBAAkB,iBApBd,eAoBnCC,EApBmC,QAuB1BC,qBAGfD,EAAeP,iBAAiB,6BACJT,GA3Ba,UA8BnBgB,EAAeE,YA9BI,QA8BnCC,EA9BmC,OAiCzC3B,EAAgB2B,EAAQjB,SAAS,GAAK,KAjCG,kDAmCzCkB,QAAQC,IAAR,qCAnCyC,0DAAH,qDAuC1C,OACE,yBAAKC,UAAU,OACb,sEACCnC,IAAsBE,GACjB,6CAAmBE,GAExBJ,GAAqBE,GACpB,4BAAQkC,QAASpB,GAAjB,kCAEAhB,GACA,mFCxEYqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBvC,WACrBA,UAAUwC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,a","file":"static/js/main.2d5edb9b.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [supportsBluetooth, setSupportsBluetooth] = useState(false);\n  const [isDisconnected, setIsDisconnected] = useState(true);\n  const [batteryLevel, setBatteryLevel] = useState(null);\n\n  // When the component mounts, check that the browser supports Bluetooth\n  useEffect(() => {\n    if (navigator.bluetooth) {\n      setSupportsBluetooth(true);\n    }\n  }, []);\n\n  /**\n   * Let the user know when their device has been disconnected.\n   */\n  const onDisconnected = (event) => {\n    alert(`The device ${event.target} is disconnected`);\n    setIsDisconnected(true);\n  }\n\n  /**\n   * Update the value shown on the web page when a notification is\n   * received.\n   */\n  const handleCharacteristicValueChanged = (event) => {\n    setBatteryLevel(event.target.value.getUint8(0) + '%');\n  }\n\n  /**\n   * Attempts to connect to a Bluetooth device and subscribe to\n   * battery level readings using the battery service.\n   */\n  const connectToDeviceAndSubscribeToUpdates = async () => {\n    try {\n      // Search for Bluetooth devices that advertise a battery service\n      const device = await navigator.bluetooth\n        .requestDevice({\n          filters: [{services: ['battery_service']}]\n        });\n\n      setIsDisconnected(false);\n\n      // Add an event listener to detect when a device disconnects\n      device.addEventListener('gattserverdisconnected', onDisconnected);\n\n      // Try to connect to the remote GATT Server running on the Bluetooth device\n      const server = await device.gatt.connect();\n\n      // Get the battery service from the Bluetooth device\n      const service = await server.getPrimaryService('battery_service');\n\n      // Get the battery level characteristic from the Bluetooth device\n      const characteristic = await service.getCharacteristic('battery_level');\n\n      // Subscribe to battery level notifications\n      characteristic.startNotifications();\n\n      // When the battery level changes, call a function\n      characteristic.addEventListener('characteristicvaluechanged',\n                                  handleCharacteristicValueChanged);\n      \n      // Read the battery level value\n      const reading = await characteristic.readValue();\n\n      // Show the initial reading on the web page\n      setBatteryLevel(reading.getUint8(0) + '%');\n    } catch(error) {\n      console.log(`There was an error: ${error}`);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Get Device Battery Info Over Bluetooth</h1>\n      {supportsBluetooth && !isDisconnected &&\n            <p>Battery level: {batteryLevel}</p>\n      }\n      {supportsBluetooth && isDisconnected &&\n        <button onClick={connectToDeviceAndSubscribeToUpdates}>Connect to a Bluetooth device</button>\n      }\n      {!supportsBluetooth &&\n        <p>This browser doesn't support the Web Bluetooth API</p>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}